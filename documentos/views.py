from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth import authenticate, login, logout
from django.contrib.auth.decorators import login_required
from documentos.decorators import restringir_eventos
from django.contrib import messages
from .forms import LoginForm, EventoForm
from .models import Proyecto, Subproyecto, Documento, Evento
from django.http import JsonResponse
from django.conf import settings
from django.core.mail import send_mail, EmailMultiAlternatives
from django.template.loader import render_to_string
from django.utils.html import strip_tags
import pandas as pd
from django.core.files.storage import FileSystemStorage


def login_view(request):
    if request.method == 'POST':
        form = LoginForm(data=request.POST)
        if form.is_valid():
            user = form.get_user()
            login(request, user)
            return redirect('dashboard')  # Redirige al dashboard despu√©s de iniciar sesi√≥n
        else:
            messages.error(request, "Credenciales incorrectas.")
    else:
        form = LoginForm()
    return render(request, 'documentos/login.html', {'form': form})

@login_required
def dashboard_view(request):
    proyectos = Proyecto.objects.all()  # Obtener todos los proyectos
    return render(request, 'documentos/dashboard.html', {'proyectos': proyectos})

@login_required
def get_subproyectos(request, proyecto_id):
    """ Devuelve los subproyectos asociados a un proyecto """
    subproyectos = list(Subproyecto.objects.filter(proyecto_id=proyecto_id).values("id", "nombre"))
    return JsonResponse(subproyectos, safe=False)

@login_required
def get_documentos(request, subproyecto_id):
    """ Devuelve los documentos asociados a un subproyecto """
    documentos = list(Documento.objects.filter(subproyecto_id=subproyecto_id).values("id", "codigo", "nombre"))
    return JsonResponse(documentos, safe=False)

def logout_view(request):
    logout(request)
    messages.success(request, "Has cerrado sesi√≥n exitosamente.")
    return redirect('login')  # Redirige a la p√°gina de inicio de sesi√≥n


@login_required
def get_documento_detalle(request, documento_id):
    """ Devuelve los detalles del documento seleccionado en formato JSON """
    documento = get_object_or_404(Documento, id=documento_id)
    data = {
        "estado_actual": documento.estado_actual,
        "etapa_actual": documento.etapa_actual,
        "version_actual": documento.version_actual,
        "numero_version": documento.numero_version,
        "estado_version": documento.estado_version,
        "ruta_actual": documento.ruta_actual,
        "revisado": documento.revisado,  # Nuevo campo
        "aprobado": documento.aprobado   # Nuevo campo
    }
    return JsonResponse(data)

@login_required
def get_eventos_documento(request, documento_id):
    """ Devuelve los eventos asociados a un documento en formato JSON """
    documento = get_object_or_404(Documento, id=documento_id)
    eventos = Evento.objects.filter(documento=documento).order_by("fecha_creacion_evento")

    data = [
        {
            "id": evento.id,
            "usuario": evento.usuario.username,
            "usuario_interesado_1": evento.usuario_interesado_1.username if evento.usuario_interesado_1 else None,
            "usuario_interesado_2": evento.usuario_interesado_2.username if evento.usuario_interesado_2 else None,
            "usuario_interesado_3": evento.usuario_interesado_3.username if evento.usuario_interesado_3 else None,
            "fecha": evento.fecha_creacion_evento.strftime("%Y-%m-%d %H:%M"),
            "estado_actual": evento.estado_actual,
            "version_actual": evento.version_actual,
            "numero_version": evento.numero_version,
            "estado_version": evento.estado_version,
            "ruta_actual": evento.ruta_actual,
            "tipo_evento": evento.tipo_evento,
            "descripcion": evento.descripcion,
            "comentarios": evento.comentarios,
                    }
        for evento in eventos
    ]

    return JsonResponse(data, safe=False)



@login_required
def upload_proyecto(request):
    if request.method == 'POST' and request.FILES.get('archivo_excel'):
        archivo = request.FILES['archivo_excel']
        fs = FileSystemStorage()
        filename = fs.save(archivo.name, archivo)
        file_path = fs.path(filename)

        try:
            # Leer el archivo Excel
            df = pd.read_excel(file_path, header=None)
            
            # Extraer Proyecto y Subproyecto
            proyecto_nombre = df.iloc[0, 1] if len(df) > 0 else None
            subproyecto_nombre = df.iloc[1, 1] if len(df) > 1 else None
            
            if not proyecto_nombre or not subproyecto_nombre:
                messages.error(request, 'El archivo no contiene informaci√≥n v√°lida de proyecto y subproyecto')
                return redirect('upload_proyecto')
            
            # Verificar y crear Proyecto
            proyecto, _ = Proyecto.objects.get_or_create(nombre=proyecto_nombre)
            
            # Verificar y crear Subproyecto
            subproyecto, _ = Subproyecto.objects.get_or_create(nombre=subproyecto_nombre, proyecto=proyecto)
            
            # Leer documentos desde la fila 4 en adelante
            if len(df) > 3:
                for index, row in df.iloc[3:].iterrows():
                    if pd.notna(row[0]) and pd.notna(row[1]):  # Verifica que las celdas no est√©n vac√≠as
                        documento_codigo = str(row[0]).strip()
                        documento_nombre = str(row[1]).strip()
                        
                        # Verificar si el documento ya existe antes de crearlo
                        if not Documento.objects.filter(codigo=documento_codigo).exists():
                            Documento.objects.create(
                                codigo=documento_codigo,
                                nombre=documento_nombre,
                                subproyecto=subproyecto
                            )
            
            messages.success(request, 'Archivo procesado exitosamente')
            return redirect('dashboard')  # Redirige al dashboard despu√©s del √©xito
        except Exception as e:
            messages.error(request, f'Error al procesar el archivo: {str(e)}')
            return redirect('upload_proyecto')
    
    return render(request, 'documentos/upload_proyecto.html')


#**************************************************************************************************************************************#
#**************************************************************************************************************************************#
#**************************************************************************************************************************************#
#*********************************************** ***************************************************************************************#
def validar_evento_permitido(documento, tipo_evento):
    """"
    Verifica si el evento es v√°lido para ser registrado en base a reglas de negocio.
    Retorna un mensaje de error si no se permite, o None si es v√°lido.
    """

    # üöÄ Cacheamos consultas para evitar m√∫ltiples b√∫squedas innecesarias en la base de datos
    eventos_previos = Evento.objects.filter(documento=documento).values_list("tipo_evento", flat=True)
    if tipo_evento == "Selecciona el tipo de evento":
        return "‚ö†Ô∏è Debes seleccionar un evento"
    
    # üîç Si el documento no tiene eventos registrados, solo se permiten estos eventos iniciales
    EVENTOS_INICIALES = {
        "Creaci√≥n de Versi√≥n Preliminar",
        "Solicitud de Creaci√≥n de Medici√≥n o Actividad",
  
        "Actualizaci√≥n del documento",
        "Suspensi√≥n del documento",
        "Eliminaci√≥n del documento",
        "Reactivaci√≥n del documento",
        }

    if not eventos_previos and tipo_evento not in EVENTOS_INICIALES:
        return "‚ùå No puedes registrar este evento en un documento sin historial. Solo se permiten eventos iniciales."
    
    # üö® No permitir duplicados de "Solicitud de Creaci√≥n de Medici√≥n o Actividad"
    if tipo_evento == "Solicitud de Creaci√≥n de Medici√≥n o Actividad" and "Solicitud de Creaci√≥n de Medici√≥n o Actividad" in eventos_previos:
        return "‚ö†Ô∏è No puedes registrar otra 'Solicitud de Creaci√≥n de Medici√≥n o Actividad' en este documento."


    # üîç Camino de "Creaci√≥n de Medici√≥n o Actividad"
    if documento.estado_actual == "Actividad":
        EVENTOS_CAMINO_MEDICION = {
            "Solicitud de Creaci√≥n de Medici√≥n o Actividad",
            "Solicitud de Revisi√≥n de Medici√≥n o Actividad",
            "Creaci√≥n de Informe de Medici√≥n o Actividad",
        }

        # üö® Solo se permiten eventos en el camino correcto
        if tipo_evento not in EVENTOS_CAMINO_MEDICION:
            return "‚ö†Ô∏è Este documento est√° en estado 'Actividad'. Solo puedes registrar eventos del camino de medici√≥n o actividad."
        
        # üö® Validar el orden de los eventos en el camino de medici√≥n
        if tipo_evento == "Solicitud de Revisi√≥n de Medici√≥n o Actividad" and "Solicitud de Creaci√≥n de Medici√≥n o Actividad" not in eventos_previos:
            return "‚ö†Ô∏è No puedes solicitar la revisi√≥n sin haber creado la solicitud de medici√≥n o actividad."

        if tipo_evento == "Creaci√≥n de Informe de Medici√≥n o Actividad" and "Solicitud de Revisi√≥n de Medici√≥n o Actividad" not in eventos_previos:
            return "‚ö†Ô∏è No puedes crear el informe sin haber solicitado la revisi√≥n de medici√≥n o actividad."


    # üîç Camino de "Creaci√≥n de Versi√≥n Preliminar"
    if documento.etapa_actual == "PRELIMINAR":
        EVENTOS_CAMINO_ETAPA_PRELIMINAR = {
            "Solicitud de Revisi√≥n",

            "Solicitud de Correcci√≥n por Calidad",
            "Solicitud de Correcci√≥n por Ingenier√≠a",
            
            "Documento Aprobado por Ingenier√≠a",
            "Documento Aprobado por Calidad",

            "Solicitud de Superaci√≥n de Numero de Versi√≥n Interna",
            "Creaci√≥n de Versi√≥n Interna Superada",

            "Solicitud de Superaci√≥n a Versi√≥n Interdisciplinaria",
            "Creaci√≥n de Versi√≥n Interdisciplinaria",

        }

        # No se puede revisar un documento que se encuentra actualmente Aprobado por Ingenier√≠a
        if tipo_evento == "Documento Aprobado por Ingenier√≠a" and documento.revisado:
            return "‚ö†Ô∏è El documento se encuentra actualmente aprobado por Ingenier√≠a."
        
        # No se puede aprobar un documento que se encuentra actualmente aprobado 
        if tipo_evento == "Documento Aprobado por Calidad" and documento.aprobado:
            return "‚ö†Ô∏è El documento se encuentra actualmente aprobado por calidad"


        # No se puede solicitar la superacion de un documento que no se encuantra actualmente aprobado por Ingenier√≠a y calidad
        if tipo_evento == "Solicitud de Superaci√≥n a Versi√≥n Interdisciplinaria" and (not documento.revisado or not documento.aprobado):
            return "‚ö†Ô∏è No puedes solicitar la superaci√≥n a Versi√≥n Interdisciplinaria si el documento no ha sido aprobado por Ingenier√≠a y Calidad"
        
        if tipo_evento == "Creaci√≥n de Versi√≥n Interna Superada" and not documento.Solicitud_Superaci√≥n_Numero_de_Versi√≥n:
            return "‚ö†Ô∏è No puedes crear una Versi√≥n Interna Superada de este documento si no ha sido solicitada"
        
        # No se puede realizar la Creaci√≥n de Versi√≥n Interdisciplinaria si no se ha solicitado 
        if tipo_evento == "Creaci√≥n de Versi√≥n Interdisciplinaria" and not documento.Solicitud_Superaci√≥n_de_Versi√≥n:
            return "‚ö†Ô∏è No se puede crear La Versi√≥n Interdisciplinaria si no se ha realizado la solicitud de superaci√≥n"
        
        if tipo_evento == "Creaci√≥n de Versi√≥n Preliminar" and "Creaci√≥n de Versi√≥n Preliminar" in eventos_previos:
            return "‚ö†Ô∏è No puedes registrar otra 'Creaci√≥n de Versi√≥n Preliminar' en este documento."

        if tipo_evento not in EVENTOS_CAMINO_ETAPA_PRELIMINAR:
            return "‚ö†Ô∏è Este documento est√° en etapa 'PRELIMINAR'. Solo puedes registrar eventos relacionados a esta etapa."
        
        return 
        
    
    

    # üîç Camino de "Creaci√≥n de Versi√≥n Interdisciplinaria"
    if documento.etapa_actual == "INTERDISCIPLINARIA":
        EVENTOS_CAMINO_ETAPA_INTERDISCIPLINARIA = {
            "Solicitud de Revisi√≥n",

            "Solicitud de Correcci√≥n por Calidad",
            "Solicitud de Correcci√≥n por Ingenier√≠a",

            "Documento Aprobado por Ingenier√≠a",
            "Documento Aprobado por Calidad",

            "Solicitud de Envio de documento al cliente",
            "Solicitud de Cancelaci√≥n de Envio de documento al cliente",

            "Solicitud de Superaci√≥n de Numero de Versi√≥n Interdisciplinaria",
            "Creaci√≥n de Versi√≥n Interdisciplinaria Superada",

            "Solicitud de Superaci√≥n a Versi√≥n Final",
            "Creaci√≥n de Versi√≥n Final",

        }
        
        # No se puede revisar un documento que se encuentra actualmente Aprobado por Ingenier√≠a
        if tipo_evento == "Documento Aprobado por Ingenier√≠a" and documento.revisado:
            return "‚ö†Ô∏è El documento ya se encuentra actualmente aprobado por Ingenier√≠a."
        
        # No se puede aprobar un documento que se encuentra actualmente aprobado 
        if tipo_evento == "Documento Aprobado por Calidad" and documento.aprobado:
            return "‚ö†Ô∏è El documento ya se encuentra actualmente aprobado por calidad"
        
        # No se puede Solicitar un Envio de documento al cliente si no ha sido aprobado por Ingenier√≠a y calidad
        if tipo_evento == "Solicitud de Envio de documento al cliente" and (not documento.revisado or not documento.aprobado):
            return "‚ö†Ô∏è El documento aun no ha sido aprobado por ingenier√≠a y calidad"
        
        # No se puede solicitar la cancelacion de envio de documento al cliente si el el documento no se encuentra actualmente en proceso de envio
        if tipo_evento == "Solicitud de Cancelaci√≥n de Envio de documento al cliente" and not documento.Solicitud_de_Envio:
            return "‚ö†Ô∏è El documento no se encuentra actualmente en proceso de envio"

        # No se puede crear una version interdisciplinaria superada sin que haya sido solicitada
        if tipo_evento == "Creaci√≥n de Versi√≥n Interdisciplinaria Superada" and not documento.Solicitud_Superaci√≥n_Numero_de_Versi√≥n:
            return "‚ö†Ô∏è No se puede crear una Versi√≥n Interdisciplinaria Superada sin que haya sido solicitada previamente"
        
        # No se puede solicitar la Superaci√≥n a Versi√≥n Final sin que el documento haya sido aprobado por calidad e Ingenier√≠a 
        if tipo_evento == "Solicitud de Superaci√≥n a Versi√≥n Final" and (not documento.revisado or not documento.aprobado):
            return "‚ö†Ô∏è No se puede realizar la Solicitud de Superaci√≥n a Versi√≥n Final sin que el documento haya sido aprobado por Ingenier√≠a y calidad"
        
        if tipo_evento not in EVENTOS_CAMINO_ETAPA_INTERDISCIPLINARIA:
            return "‚ö†Ô∏è Este documento est√° en etapa 'INTERDISCIPLINARIA'. Solo puedes registrar eventos relacionados a esta etapa."
        
        return 


    if documento.etapa_actual == "FINAL":

        EVENTOS_CAMINO_ETAPA_FINAL = {
            
            "Solicitud de Revisi√≥n",

            "Solicitud de Correcci√≥n por Calidad",
            "Solicitud de Correcci√≥n por Ingenier√≠a",

            "Documento Aprobado por Ingenier√≠a",
            "Documento Aprobado por Calidad",

            "Solicitud de Envio de documento al cliente",
            "Solicitud de Cancelaci√≥n de Envio de documento al cliente",

            "Solicitud de Superaci√≥n de Numero de Versi√≥n Final",
            "Creaci√≥n de Versi√≥n Final Superada"

        }
                # No se puede revisar un documento que se encuentra actualmente Aprobado por Ingenier√≠a
        if tipo_evento == "Documento Aprobado por Ingenier√≠a" and documento.revisado:
            return "‚ö†Ô∏è El documento ya se encuentra actualmente aprobado por Ingenier√≠a."
        
        # No se puede aprobar un documento que se encuentra actualmente aprobado 
        if tipo_evento == "Documento Aprobado por Calidad" and documento.aprobado:
            return "‚ö†Ô∏è El documento ya se encuentra actualmente aprobado por calidad"
        
        # No se puede Solicitar un Envio de documento al cliente si no ha sido aprobado por Ingenier√≠a y calidad
        if tipo_evento == "Solicitud de Envio de documento al cliente" and (not documento.revisado  or not documento.aprobado):
            return "‚ö†Ô∏è El documento aun no ha sido aprobado por ingenier√≠a y calidad"
        
        # No se puede solicitar la cancelacion de envio de documento al cliente si el el documento no se encuentra actualmente en proceso de envio
        if tipo_evento == "Solicitud de Cancelaci√≥n de Envio de documento al cliente" and not documento.Solicitud_de_Envio:
            return "‚ö†Ô∏è El documento no se encuentra actualmente en proceso de envio"
        
        if tipo_evento == "Creaci√≥n de Versi√≥n Final Superada" and not documento.Solicitud_Superaci√≥n_Numero_de_Versi√≥n:
            return "‚ö†Ô∏è No se puede Crear una Versi√≥n Final Superada sin que haya sido superada"

        if tipo_evento not in EVENTOS_CAMINO_ETAPA_FINAL:
            return "‚ö†Ô∏è Este documento est√° en etapa 'FINAL'. Solo puedes registrar eventos relacionados a esta etapa."
        
        return None


@restringir_eventos
@login_required
def registrar_evento(request, documento_id):
    """Vista para registrar un evento en un documento"""
    documento = get_object_or_404(Documento, id=documento_id)

    # **Definir descripciones de eventos**
    descripciones_eventos = {

        # Eventos de Creaci√≥n de Documento
        "Creaci√≥n de Versi√≥n Preliminar": "Se ha creado la versi√≥n A del documento y se solicita la revisi√≥n preliminar de este para su primera evaluaci√≥n.",
        "Creaci√≥n de Versi√≥n Interna Superada": "Se ha creado la versi√≥n nueva del documento y se solicita la revisi√≥n de este para su evaluaci√≥n.",

        "Creaci√≥n de Versi√≥n Interdisciplinaria": "Se ha creado la versi√≥n interdisciplinaria del documento y se solicita la revisi√≥n de este para su evaluaci√≥n.",
        "Creaci√≥n de Versi√≥n Interdisciplinaria Superada": "Se ha creado la versi√≥n nueva del documento y se solicita la revisi√≥n de este para su evaluaci√≥n.",

        "Creaci√≥n de Versi√≥n Final": "Se ha creado la versi√≥n final del documento y se solicita la revisi√≥n de este para su evaluaci√≥n.",
        "Creaci√≥n de Versi√≥n Final Superada": "Se ha creado la versi√≥n nueva del documento y se solicita la revisi√≥n de este para su evaluaci√≥n.",

        # Eventos de Solicitudes de Documento
        "Solicitud de Revisi√≥n": "Se ha solicitado la revisi√≥n del documento.",
        "Solicitud de Correcci√≥n por Calidad": "Se ha solicitado ls correci√≥n del documento por calidad.",
        "Solicitud de Correcci√≥n por Ingenier√≠a": "Se ha solicitado la correci√≥n del documento por ingenier√≠a",

        "Solicitud de Envio de documento al cliente": "Se ha solicitado el envio del documento al cliente.",
        "Solicitud de Cancelaci√≥n de Envio de documento al cliente": "Se ha solicitado la cancelaci√≥n del envio del documento al cliente.",

        "Solicitud de Superaci√≥n de Numero de Versi√≥n Interna": "Se ha solicitado subir el n√∫mero de versi√≥n interna del documento.",

        "Solicitud de Superaci√≥n a Versi√≥n Interdisciplinaria": "Se ha solicitado subir de versi√≥n interna (A) a Versi√≥n interdisciplinaria (B).",
        "Solicitud de Superaci√≥n de Numero de Versi√≥n Interdisciplinaria": "Se ha solicitado subir el n√∫mero de versi√≥n interdisciplinaria del documento.",

        "Solicitud de Superaci√≥n a Versi√≥n Final": "Se ha solicitado subir de versi√≥n interdisciplinaria (B) a Version final (0).",
        "Solicitud de Superaci√≥n de Numero de Versi√≥n Final": "Se ha solicitado subir el n√∫mero de versi√≥n final del documento.",

        # Eventos de Documento de Medici√≥n o Actividad
        "Solicitud de Creaci√≥n de Medici√≥n o Actividad": "Se ha solicitado la creaci√≥n de una medici√≥n o actividad.",
        "Solicitud de Revisi√≥n de Medici√≥n o Actividad": "Se ha solicitado la revisi√≥n de una medici√≥n o actividad.",
        "Creaci√≥n de Informe de Medici√≥n o Actividad": "Se ha creado el documento informe de medici√≥n o actividad.",	

        
        # Eventos de Revisi√≥n y Aprobaci√≥n de Documento
        "Documento Aprobado por Ingenier√≠a": "El documento ha sido aprobado por ingenier√≠a.",
        "Documento Aprobado por Calidad": "El documento ha sido aprobado por calidad.",
        
        # Eventos de Modificacion de estado del Documento
        "Actualizaci√≥n del documento": "Se ha actualizado el documento.",
        "Suspensi√≥n del documento": "Se ha suspendido el documento.",
        "Eliminaci√≥n del documento": "Se ha eliminado el documento.",
        "Reactivaci√≥n del documento": "Se ha reactivado el documento.",
    }

    if request.method == "POST":
        form = EventoForm(request.POST)
        if form.is_valid():
            evento = form.save(commit=False)
            evento.documento = documento
            evento.usuario = request.user
            evento.estado_actual = documento.estado_actual
            evento.etapa_actual = documento.etapa_actual
            evento.version_actual = documento.version_actual
            evento.numero_version = documento.numero_version
            evento.estado_version = documento.estado_version
            evento.descripcion = descripciones_eventos.get(evento.tipo_evento, "Descripci√≥n no disponible")

###############################################     Validaciones de eventos      ################################################
            # üö® Verificar si el evento est√° permitido
            mensaje_error = validar_evento_permitido(documento, evento.tipo_evento)
            if mensaje_error:
                messages.error(request, mensaje_error)
                return redirect("registrar_evento", documento_id=documento.id)


################################################ Fin de Validaciones de eventos ################################################
            
################################################       L√≥gica de eventos        ################################################

############## Creaci√≥n de versiones ##############

            # **Evento 1: Creaci√≥n de Versi√≥n Preliminar**
            if evento.tipo_evento == "Creaci√≥n de Versi√≥n Preliminar":
                documento.version_actual = "A"
                documento.numero_version = 1
                documento.ruta_actual = request.POST.get("ruta_actual", documento.ruta_actual)
                documento.revisado = False  # Reiniciar variable de revisado
                documento.aprobado = False  # Reiniciar variable de aprobado
                documento.Solicitud_Superaci√≥n_de_Versi√≥n = False # Reiniciar Variable de Solicitud_Superaci√≥n_de_Versi√≥n
                documento.Solicitud_Superaci√≥n_Numero_de_Versi√≥n = False # Reiniciar Variable Solicitud_Superaci√≥n_Numero_de_Versi√≥n
                documento.etapa_actual = "PRELIMINAR"
                documento.estado_actual = "VIGENTE"
            
             # **Evento 2: Creaci√≥n de Versi√≥n Interna Superada**
            elif evento.tipo_evento == "Creaci√≥n de Versi√≥n Interna Superada":
                documento.version_actual = "A"  # Mantiene la versi√≥n en "A"
                documento.numero_version = (documento.numero_version or 0) + 1  # Incrementa el n√∫mero de versi√≥n
                documento.ruta_actual = request.POST.get("ruta_actual", documento.ruta_actual)                
                documento.revisado = False  # Reiniciar variable de revisado
                documento.aprobado = False  # Reiniciar variable de aprobado           
                documento.Solicitud_Superaci√≥n_de_Versi√≥n = False # Reiniciar Variable de Solicitud_Superaci√≥n_de_Versi√≥n
                documento.Solicitud_Superaci√≥n_Numero_de_Versi√≥n = False # Reiniciar Variable Solicitud_Superaci√≥n_Numero_de_Versi√≥n


            # **Evento 3: Creaci√≥n de Versi√≥n Interdisciplinaria**
            elif evento.tipo_evento == "Creaci√≥n de Versi√≥n Interdisciplinaria":
                documento.version_actual = "B"  # Cambia la versi√≥n a "B"
                documento.numero_version = 1  # Reinicia el n√∫mero de versi√≥n
                documento.ruta_actual = request.POST.get("ruta_actual", documento.ruta_actual)
                documento.revisado = False  # Reiniciar variable de revisado
                documento.aprobado = False  # Reiniciar variable de aprobado
                documento.Solicitud_Superaci√≥n_de_Versi√≥n = False # Reiniciar Variable de Solicitud_Superaci√≥n_de_Versi√≥n
                documento.Solicitud_Superaci√≥n_Numero_de_Versi√≥n = False # Reiniciar Variable Solicitud_Superaci√≥n_Numero_de_Versi√≥n
                documento.etapa_actual = "INTERDISCIPLINARIA" # Cambia la etapa a "INTERDISCIPLINARIA"

            # **Evento 4: Creaci√≥n de Versi√≥n Interdisciplinaria Superada**
            elif evento.tipo_evento == "Creaci√≥n de Versi√≥n Interdisciplinaria Superada":
                documento.version_actual = "B"  # Mantiene la versi√≥n en "B"
                documento.numero_version = (documento.numero_version or 0) + 1  # Incrementa el n√∫mero de versi√≥n
                documento.ruta_actual = request.POST.get("ruta_actual", documento.ruta_actual)
                documento.revisado = False  # Reiniciar variable de revisado
                documento.aprobado = False  # Reiniciar variable de aprobado                
                documento.Solicitud_Superaci√≥n_de_Versi√≥n = False # Reiniciar Variable de Solicitud_Superaci√≥n_de_Versi√≥n
                documento.Solicitud_Superaci√≥n_Numero_de_Versi√≥n = False # Reiniciar Variable Solicitud_Superaci√≥n_Numero_de_Versi√≥n
            
            # **Evento 5: Creaci√≥n de Versi√≥n Final**
            elif evento.tipo_evento == "Creaci√≥n de Versi√≥n Final":
                documento.version_actual = "0" # Cambia la versi√≥n a "0"
                documento.numero_version = None  # Reinicia el n√∫mero de versi√≥n a null
                documento.ruta_actual = request.POST.get("ruta_actual", documento.ruta_actual)
                documento.revisado = False  # Reiniciar variable de revisado
                documento.aprobado = False  # Reiniciar variable de aprobado
                documento.Solicitud_Superaci√≥n_de_Versi√≥n = False # Reiniciar Variable de Solicitud_Superaci√≥n_de_Versi√≥n
                documento.Solicitud_Superaci√≥n_Numero_de_Versi√≥n = False # Reiniciar Variable Solicitud_Superaci√≥n_Numero_de_Versi√≥n
                documento.etapa_actual = "FINAL" # Cambia la etapa a "FINAL"

            # **Evento 6: Creaci√≥n de Versi√≥n Final Superada**
            elif evento.tipo_evento == "Creaci√≥n de Versi√≥n Final Superada":
                documento.version_actual = (documento.version_actual or 0) + 1  # Incrementa el n√∫mero de versi√≥n
                documento.ruta_actual = request.POST.get("ruta_actual", documento.ruta_actual)
                documento.revisado = False  # Reiniciar variable de revisado
                documento.aprobado = False  # Reiniciar variable de aprobado
                documento.Solicitud_Superaci√≥n_de_Versi√≥n = False # Reiniciar Variable de Solicitud_Superaci√≥n_de_Versi√≥n
                documento.Solicitud_Superaci√≥n_Numero_de_Versi√≥n = False # Reiniciar Variable Solicitud_Superaci√≥n_Numero_de_Versi√≥n
                


############## Solicitudes ##############

            # **Evento 7: Solicitud de Revisi√≥n**
            elif evento.tipo_evento == "Solicitud de Revisi√≥n":
                documento.ruta_actual = request.POST.get("ruta_actual", documento.ruta_actual)

            # **Evento 8: Solicitud de Correcci√≥n por calidad**
            elif evento.tipo_evento == "Solicitud de Correcci√≥n por Calidad":
                documento.aprobado = False
                documento.ruta_actual = request.POST.get("ruta_actual", documento.ruta_actual)
                "Solicitud de Correcci√≥n por Ingenier√≠a"
            
            # **Evento 9: Solicitud de Correcci√≥n por Ingenier√≠a**
            elif evento.tipo_evento == "Solicitud de Correcci√≥n por Ingenier√≠a":
                documento.revisado = False
                documento.ruta_actual = request.POST.get("ruta_actual", documento.ruta_actual)
            
            
            # **Evento 9: Solicitud de envio de documento al cliente**
            elif evento.tipo_evento == "Solicitud de Envio de documento al cliente":
                documento.estado_actual = "ENVIO"
                documento.Solicitud_de_Envio = True
                documento.ruta_actual = request.POST.get("ruta_actual", documento.ruta_actual)

            # **Evento 10: Solicitud de Cancelacion de Envio de documento al cliente**
            elif evento.tipo_evento == "Solicitud de Cancelaci√≥n de Envio de documento al cliente":
                documento.estado_actual = "VIGENTE"
                documento.Solicitud_de_Envio = False
                documento.ruta_actual = request.POST.get("ruta_actual", documento.ruta_actual)

            
            # **Evento 9: Solicitud de Superaci√≥n de numero Versi√≥n Interna**
            elif evento.tipo_evento == "Solicitud de Superaci√≥n de Numero de Versi√≥n Interna":
                documento.Solicitud_Superaci√≥n_Numero_de_Versi√≥n = True
                documento.ruta_actual = request.POST.get("ruta_actual", documento.ruta_actual)


            # ** Evento 10: Solicitud de superaci√≥n a Versi√≥n Interdisciplinaria**
            elif evento.tipo_evento == "Solicitud de Superaci√≥n a Versi√≥n Interdisciplinaria":
                documento.Solicitud_Superaci√≥n_de_Versi√≥n = True

                documento.ruta_actual = request.POST.get("ruta_actual", documento.ruta_actual)

            # **Evento 11: Solicitud de Superaci√≥n de Numero de Versi√≥n Interdisciplinaria**
            elif evento.tipo_evento == "Solicitud de Superaci√≥n de Numero de Versi√≥n Interdisciplinaria":     
                documento.Solicitud_Superaci√≥n_Numero_de_Versi√≥n = True
                documento.Solicitud_de_Envio = False
                documento.ruta_actual = request.POST.get("ruta_actual", documento.ruta_actual)


            # **Evento 12: Solicitud de superaci√≥n a Versi√≥n Final**
            elif evento.tipo_evento == "Solicitud de Superaci√≥n a Versi√≥n Final":
                documento.Solicitud_Superaci√≥n_de_Versi√≥n = True
                documento.Solicitud_de_Envio = False
                documento.ruta_actual = request.POST.get("ruta_actual", documento.ruta_actual)

            # **Evento 13: Solicitud de Superaci√≥n de Numero de Versi√≥n Final**
            elif evento.tipo_evento == "Solicitud de Superaci√≥n de Numero de Versi√≥n Final":
                documento.Solicitud_Superaci√≥n_Numero_de_Versi√≥n = True
                documento.Solicitud_de_Envio = False
                documento.ruta_actual = request.POST.get("ruta_actual", documento.ruta_actual)

############## Documento de Medici√≥n o Actividad ##############

            # **Evento 14: Solicitud de Creaci√≥n de Medici√≥n o Actividad**
            elif evento.tipo_evento == "Solicitud de Creaci√≥n de Medici√≥n o Actividad":
                documento.ruta_actual = request.POST.get("ruta_actual", documento.ruta_actual)
                documento.estado_actual = "Actividad"
            
            # **Evento 15: Solicitud de Revisi√≥n de Medici√≥n o Actividad**
            elif evento.tipo_evento == "Solicitud de Revisi√≥n de Medici√≥n o Actividad":
                documento.ruta_actual = request.POST.get("ruta_actual", documento.ruta_actual)

            # **Evento 16: Creaci√≥n de Informe de Medici√≥n o Actividad**
            elif evento.tipo_evento == "Creaci√≥n de Informe de Medici√≥n o Actividad":
                documento.ruta_actual = request.POST.get("ruta_actual", documento.ruta_actual)

            
############## Revisiones y Aprobaciones ##############

            # **Evento 14: Documento Revisado**
            elif evento.tipo_evento == "Documento Aprobado por Ingenier√≠a":
                documento.revisado = True  # Se marca como revisado

            # **Evento 15: Documento Aprobado**
            elif evento.tipo_evento == "Documento Aprobado por Calidad":
                documento.aprobado = True  # Se marca como aprobado

############## Modificaciones de estado ##############

            # **Evento 16: Actualizaci√≥n del documento**
            elif evento.tipo_evento == "Actualizaci√≥n del documento":
                documento.estado_actual = "ACTUALIZADO"
                documento.ruta_actual = request.POST.get("ruta_actual", documento.ruta_actual)
            # **Evento 17: Suspensi√≥n del documento**
            elif evento.tipo_evento == "Suspensi√≥n del documento":
                documento.estado_actual = "SUSPENDIDO"
                documento.ruta_actual = request.POST.get("ruta_actual", documento.ruta_actual)
            # **Evento 18: Eliminaci√≥n del documento**
            elif evento.tipo_evento == "Eliminaci√≥n del documento":
                documento.estado_actual = "ELIMINADO"
                documento.ruta_actual = request.POST.get("ruta_actual", documento.ruta_actual)
            # **Evento 19: Reactivaci√≥n del documento**
            elif evento.tipo_evento == "Reactivaci√≥n del documento":
                documento.estado_actual = "VIGENTE"
                documento.ruta_actual = request.POST.get("ruta_actual", documento.ruta_actual)

           
            documento.save()
            evento.save()

            # **üìß Enviar correo si hay destinatarios**
            destinatarios = [
                evento.usuario.email,
                evento.usuario_interesado_1.email if evento.usuario_interesado_1 else None,
                evento.usuario_interesado_2.email if evento.usuario_interesado_2 else None,
                evento.usuario_interesado_3.email if evento.usuario_interesado_3 else None,
            ]
            destinatarios = [email for email in destinatarios if email]

            if destinatarios:
                subject = f"üìÑ Nuevo Evento Registrado: {evento.tipo_evento}"
                html_message = render_to_string("documentos/correo_evento.html", {
                    "documento": documento,
                    "evento": evento,
                })
                plain_message = strip_tags(html_message)
                from_email = settings.DEFAULT_FROM_EMAIL

                email = EmailMultiAlternatives(subject, plain_message, from_email, destinatarios)
                email.attach_alternative(html_message, "text/html")
                email.send()

            # ‚úÖ Guardar mensaje de √©xito y redirigir al Dashboard
            messages.success(request, f"‚úÖ Evento '{evento.tipo_evento}' se ha registrado con √©xito.")
            return redirect("dashboard")  # Aqu√≠ redirige con el mensaje

    else:
        form = EventoForm(initial={
            "estado_actual": documento.estado_actual,
            "etapa_actual": documento.etapa_actual,
            "version_actual": documento.version_actual,
            "numero_version": documento.numero_version,
            "estado_version": documento.estado_version,
            "ruta_actual": documento.ruta_actual,
            "descripcion": descripciones_eventos.get("Creaci√≥n de Versi√≥n Preliminar", "Descripci√≥n no disponible"),
        })

    return render(request, "documentos/registrar_evento.html", {"form": form, "documento": documento, "usuario": request.user})